version: "3.7"

services:
  redis:
    image: redis:alpine
    ports:
      - 6379:6379
    volumes:
      - redis_data:/data

  minio:
    image: minio/minio:RELEASE.2021-01-08T21-18-21Z
    ports:
      - 9000:9000
    environment:
      - MINIO_ROOT_USER=depop
      - MINIO_ROOT_PASSWORD=change-in-production
    command: server /minio
    volumes:
      - minio:/minio
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.2.0
    container_name: elasticsearch
    environment:
      - xpack.security.enabled=false
      - discovery.type=single-node
    ulimits:
      memlock:
        soft: -1
        hard: -1
      nofile:
        soft: 65536
        hard: 65536
    cap_add:
      - IPC_LOCK
    volumes:
      - elasticsearch:/usr/share/elasticsearch/data
    ports:
      - 9200:9200
      - 9300:9300

  kibana:
    container_name: kibana
    image: docker.elastic.co/kibana/kibana:8.2.0
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    ports:
      - 5601:5601
    depends_on:
      - elasticsearch

  logstash:
    image: docker.elastic.co/logstash/logstash:8.2.0
    restart: unless-stopped
    # environment:
    #   - LOGSTASH_JDBC_URL=jdbc:postgresql://postgres:5432/postgres
    #   - LOGSTASH_JDBC_DRIVER=org.postgresql.Driver
    #   - LOGSTASH_JDBC_DRIVER_JAR_LOCATION=/usr/share/logstash/logstash-core/lib/jars/postgresql.jar
    #   - LOGSTASH_JDBC_USERNAME=depop
    #   - LOGSTASH_JDBC_PASSWORD=change-in-production
    #   - LOGSTASH_ELASTICSEARCH_HOST=http://elasticsearch:9200
    #   - LOGSTASH_JDBC_QUERY_DIR=/usr/share/logstash/config/queries
    #   - PIPELINE_WORKERS=4
    volumes:
      - ./config/logstash/jdbc/logstash.yml:/usr/share/logstash/config/logstash.yml
      - ./config/logstash/jdbc/pipelines.yml:/usr/share/logstash/config/pipelines.yml
      - ./config/logstash/jdbc/pipeline/:/usr/share/logstash/pipeline/
      - ./config/logstash/jdbc/drivers/postgresql-42.3.6.jar:/usr/share/logstash/logstash-core/lib/jars/postgres.jar
      - ./config/logstash/jdbc/queries/:/usr/share/logstash/config/queries/
      - ./config/logstash/jdbc/templates/:/usr/share/logstash/config/templates/
    ports:
      - 9600:9600
      - 5044:5044
    depends_on:
      - elasticsearch
      - kibana
      - postgres

  postgres:
    image: postgres:13
    ports:
      - 9002:5432
    volumes:
      - postgres:/var/lib/postgresql/data
    environment:
      - POSTGRES_USER=depop
      - POSTGRES_PASSWORD=change-in-production
      - POSTGRES_DB=depop

  postgres-sms:
    image: postgres:13
    ports:
      - 9003:5432
    volumes:
      - postgres-sms:/var/lib/postgresql/data
    environment:
      - POSTGRES_USER=depop_sms
      - POSTGRES_PASSWORD=change-in-production
      - POSTGRES_DB=depop_sms

  backend:
    image: backend:latest
    build:
      context: .
      dockerfile: services/backend/Dockerfile
    ports:
      - 3001:3001
    environment:
      - NODE_ENV=${APP_ENV:-development}

  products_service:
    image: products_service:latest
    build:
      context: .
      dockerfile: services/products/Dockerfile
    restart: on-failure:25
    ports:
      - 3002:3002
    depends_on:
      - elasticsearch
    environment:
      - NODE_ENV=${APP_ENV:-development}

  queue_service:
    image: queue_service:latest
    build:
      context: .
      dockerfile: services/queue/Dockerfile
    ports:
      - 3003:3003
    environment:
      - NODE_ENV=${APP_ENV:-development}

  sms_service:
    image: sms_service:latest
    build:
      context: .
      dockerfile: services/sms/Dockerfile
    ports:
      - 3004:3004
    environment:
      - NODE_ENV=${APP_ENV:-development}

  worker:
    image: worker:latest
    build:
      context: .
      dockerfile: services/worker/Dockerfile
    environment:
      - NODE_ENV=${APP_ENV:-development}

  web:
    image: web:latest
    build:
      context: .
      dockerfile: services/web/Dockerfile
    ports:
      - 3000:3000
    environment:
      - NODE_ENV=production

  nginx:
    image: nginx:1.19-alpine
    command: '/bin/sh -c ''while :; do sleep 6h & wait $${!}; nginx -s reload; done & nginx -g "daemon off;"'''
    ports:
      - 80:80
      - 443:443
    depends_on:
      - backend
      - web
      - products_service
    volumes:
      - ./config/nginx/nginx.${APP_ENV:-development}.conf:/etc/nginx/conf.d/default.conf
      - ./data/certbot/conf:/etc/letsencrypt
      - ./data/certbot/www:/var/www/certbot

  certbot:
    image: certbot/certbot
    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'"
    volumes:
      - ./data/certbot/conf:/etc/letsencrypt
      - ./data/certbot/www:/var/www/certbot

volumes:
  redis_data:
  postgres:
  postgres-sms:
  minio:
  elasticsearch:
    driver: local
